# coding: utf-8

"""
    PostPuma - OpenAPI 3.0

    PostPuma API specifications

    The version of the OpenAPI document: 1.0.0
    Contact: support@postpuma.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from PostPuma.models.version_options_tiktok_privacy_level import VersionOptionsTiktokPrivacyLevel
from typing import Optional, Set
from typing_extensions import Self

class VersionOptionsTiktok(BaseModel):
    """
    VersionOptionsTiktok
    """ # noqa: E501
    privacy_level: Optional[VersionOptionsTiktokPrivacyLevel] = None
    allow_comments: Optional[VersionOptionsTiktokPrivacyLevel] = None
    allow_duet: Optional[VersionOptionsTiktokPrivacyLevel] = None
    allow_stitch: Optional[VersionOptionsTiktokPrivacyLevel] = None
    content_disclosure: Optional[VersionOptionsTiktokPrivacyLevel] = None
    brand_organic_toggle: Optional[VersionOptionsTiktokPrivacyLevel] = None
    brand_content_toggle: Optional[VersionOptionsTiktokPrivacyLevel] = None
    __properties: ClassVar[List[str]] = ["privacy_level", "allow_comments", "allow_duet", "allow_stitch", "content_disclosure", "brand_organic_toggle", "brand_content_toggle"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VersionOptionsTiktok from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of privacy_level
        if self.privacy_level:
            _dict['privacy_level'] = self.privacy_level.to_dict()
        # override the default output from pydantic by calling `to_dict()` of allow_comments
        if self.allow_comments:
            _dict['allow_comments'] = self.allow_comments.to_dict()
        # override the default output from pydantic by calling `to_dict()` of allow_duet
        if self.allow_duet:
            _dict['allow_duet'] = self.allow_duet.to_dict()
        # override the default output from pydantic by calling `to_dict()` of allow_stitch
        if self.allow_stitch:
            _dict['allow_stitch'] = self.allow_stitch.to_dict()
        # override the default output from pydantic by calling `to_dict()` of content_disclosure
        if self.content_disclosure:
            _dict['content_disclosure'] = self.content_disclosure.to_dict()
        # override the default output from pydantic by calling `to_dict()` of brand_organic_toggle
        if self.brand_organic_toggle:
            _dict['brand_organic_toggle'] = self.brand_organic_toggle.to_dict()
        # override the default output from pydantic by calling `to_dict()` of brand_content_toggle
        if self.brand_content_toggle:
            _dict['brand_content_toggle'] = self.brand_content_toggle.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VersionOptionsTiktok from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "privacy_level": VersionOptionsTiktokPrivacyLevel.from_dict(obj["privacy_level"]) if obj.get("privacy_level") is not None else None,
            "allow_comments": VersionOptionsTiktokPrivacyLevel.from_dict(obj["allow_comments"]) if obj.get("allow_comments") is not None else None,
            "allow_duet": VersionOptionsTiktokPrivacyLevel.from_dict(obj["allow_duet"]) if obj.get("allow_duet") is not None else None,
            "allow_stitch": VersionOptionsTiktokPrivacyLevel.from_dict(obj["allow_stitch"]) if obj.get("allow_stitch") is not None else None,
            "content_disclosure": VersionOptionsTiktokPrivacyLevel.from_dict(obj["content_disclosure"]) if obj.get("content_disclosure") is not None else None,
            "brand_organic_toggle": VersionOptionsTiktokPrivacyLevel.from_dict(obj["brand_organic_toggle"]) if obj.get("brand_organic_toggle") is not None else None,
            "brand_content_toggle": VersionOptionsTiktokPrivacyLevel.from_dict(obj["brand_content_toggle"]) if obj.get("brand_content_toggle") is not None else None
        })
        return _obj


