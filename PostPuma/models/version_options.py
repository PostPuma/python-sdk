# coding: utf-8

"""
    PostPuma - OpenAPI 3.0

    PostPuma API specifications

    The version of the OpenAPI document: 1.0.0
    Contact: support@postpuma.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from PostPuma.models.version_options_instagram import VersionOptionsInstagram
from PostPuma.models.version_options_linkedin import VersionOptionsLinkedin
from PostPuma.models.version_options_mastodon import VersionOptionsMastodon
from PostPuma.models.version_options_pinterest import VersionOptionsPinterest
from PostPuma.models.version_options_tiktok import VersionOptionsTiktok
from PostPuma.models.version_options_youtube import VersionOptionsYoutube
from typing import Optional, Set
from typing_extensions import Self

class VersionOptions(BaseModel):
    """
    VersionOptions
    """ # noqa: E501
    tiktok: Optional[VersionOptionsTiktok] = None
    youtube: Optional[VersionOptionsYoutube] = None
    linkedin: Optional[VersionOptionsLinkedin] = None
    mastodon: Optional[VersionOptionsMastodon] = None
    instagram: Optional[VersionOptionsInstagram] = None
    pinterest: Optional[VersionOptionsPinterest] = None
    facebook_page: Optional[VersionOptionsInstagram] = None
    __properties: ClassVar[List[str]] = ["tiktok", "youtube", "linkedin", "mastodon", "instagram", "pinterest", "facebook_page"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VersionOptions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of tiktok
        if self.tiktok:
            _dict['tiktok'] = self.tiktok.to_dict()
        # override the default output from pydantic by calling `to_dict()` of youtube
        if self.youtube:
            _dict['youtube'] = self.youtube.to_dict()
        # override the default output from pydantic by calling `to_dict()` of linkedin
        if self.linkedin:
            _dict['linkedin'] = self.linkedin.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mastodon
        if self.mastodon:
            _dict['mastodon'] = self.mastodon.to_dict()
        # override the default output from pydantic by calling `to_dict()` of instagram
        if self.instagram:
            _dict['instagram'] = self.instagram.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pinterest
        if self.pinterest:
            _dict['pinterest'] = self.pinterest.to_dict()
        # override the default output from pydantic by calling `to_dict()` of facebook_page
        if self.facebook_page:
            _dict['facebook_page'] = self.facebook_page.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VersionOptions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "tiktok": VersionOptionsTiktok.from_dict(obj["tiktok"]) if obj.get("tiktok") is not None else None,
            "youtube": VersionOptionsYoutube.from_dict(obj["youtube"]) if obj.get("youtube") is not None else None,
            "linkedin": VersionOptionsLinkedin.from_dict(obj["linkedin"]) if obj.get("linkedin") is not None else None,
            "mastodon": VersionOptionsMastodon.from_dict(obj["mastodon"]) if obj.get("mastodon") is not None else None,
            "instagram": VersionOptionsInstagram.from_dict(obj["instagram"]) if obj.get("instagram") is not None else None,
            "pinterest": VersionOptionsPinterest.from_dict(obj["pinterest"]) if obj.get("pinterest") is not None else None,
            "facebook_page": VersionOptionsInstagram.from_dict(obj["facebook_page"]) if obj.get("facebook_page") is not None else None
        })
        return _obj


